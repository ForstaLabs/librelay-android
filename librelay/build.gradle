apply plugin: 'com.android.library'

repositories {
    maven {
        url "https://maven.google.com"
    }
    maven {
        url "https://raw.github.com/whispersystems/maven/master/preferencefragment/releases/"
    }
    maven {
        url "https://raw.github.com/whispersystems/maven/master/smil/releases/"
    }
    maven {
        url "https://raw.github.com/whispersystems/maven/master/shortcutbadger/releases/"
    }
    maven { // textdrawable
        url 'https://dl.bintray.com/amulyakhare/maven'
    }
    maven {
        url 'https://jitpack.io'
    }
    jcenter()
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    compile('com.android.support:support-v4-preferencefragment:1.0.0@aar') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile 'com.android.support:support-compat:28.0.0'
    compile 'com.android.support:appcompat-v7:28.0.0'
    compile 'com.android.support:recyclerview-v7:28.0.0'
    compile 'com.android.support:design:28.0.0'
    compile 'com.android.support:cardview-v7:28.0.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:gridlayout-v7:28.0.0'
    compile 'com.android.support:multidex:1.0.2'

    compile 'com.google.firebase:firebase-messaging:17.3.4'
    compile 'com.google.android.gms:play-services-base:16.0.0'
    compile 'com.google.android.gms:play-services-maps:16.0.0'
    compile 'com.google.android.gms:play-services-location:16.0.0'
    compile 'com.google.android.gms:play-services-places:16.0.0'
    compile 'com.google.android.gms:play-services-safetynet:16.0.0'
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.google.zxing:android-integration:3.1.0'

    compile('com.doomonafireball.betterpickers:library:1.5.3') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile('com.github.ForstaLabs:libsignal-service-java:forsta-v2.3.1.20') {
        exclude group: 'org.whispersystems', module: 'curve25519-java'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    compile('cn.carbswang.android:NumberPickerView:1.0.9') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    compile 'org.whispersystems:curve25519-android:0.3.0'
    compile 'org.whispersystems:webrtc-android:M63' //M74 contains 64 bit binaries required by Play Store as of 8/1/2019
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'me.leolin:ShortcutBadger:1.1.16'
    compile 'se.emilsjolander:stickylistheaders:2.7.0'
    compile 'com.jpardogo.materialtabstrip:library:1.0.9'
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5'
    compile 'com.github.chrisbanes:Photoview:1.3.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.makeramen:roundedimageview:2.1.0'
    compile 'com.pnikosis:materialish-progress:1.5'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'pl.tajchert:waitingdots:0.1.0'
    compile 'com.soundcloud.android:android-crop:0.9.10@aar'
    compile 'com.melnykov:floatingactionbutton:1.3.0'
    compile 'com.madgag.spongycastle:prov:1.51.0.0'
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    compile 'com.h6ah4i.android.compat:mulsellistprefcompat:1.0.0'
    compile 'com.annimon:stream:1.1.8'

    compile 'android.arch.work:work-runtime:1.0.0-alpha11'
    compile 'android.arch.lifecycle:extensions:1.1.1'
    compile 'android.arch.lifecycle:common-java8:1.1.1'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.1'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.1'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.1'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.1'

    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'com.android.support:multidex:1.0.2'
    androidTestImplementation('org.assertj:assertj-core:1.7.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestImplementation('com.squareup.assertj:assertj-android:1.0.0') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

android {
    compileSdkVersion 28
    useLibrary 'org.apache.http.legacy'

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String", "RECAPTCHA_KEY", "\"6LetY10UAAAAAKugwBLDP31SVLcl1iem9K1fqJlA\""
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    flavorDimensions "forsta"
    productFlavors {
        dev {
            buildConfigField "String", "FORSTA_API_URL", "\"https://atlas-dev.forsta.io\""
            buildConfigField "String", "SIGNAL_API_URL", "\"https://signal-dev.forsta.io\""
            buildConfigField "String", "FORSTA_SYNC_NUMBER", "\"1e1116aa-31b3-4fb2-a4db-21e8136d4f3a\""
            buildConfigField "String", "FORSTA_PROVIDER", "\"io.forsta.librelay.dev.provider\""
            resValue "string", "forsta_authorities", 'io.forsta.librelay.dev.provider'
            resValue "string", "forsta_account_type", 'io.forsta.librelay.dev'
        }
        prod {
            buildConfigField "String", "FORSTA_API_URL", "\"https://atlas.forsta.io\""
            buildConfigField "String", "SIGNAL_API_URL", "\"https://signal.forsta.io\""
            buildConfigField "String", "FORSTA_SYNC_NUMBER", "\"cf40fca2-dfa8-4356-8ae7-45f56f7551ca\""
            buildConfigField "String", "FORSTA_PROVIDER", "\"io.forsta.librelay.provider\""
            resValue "string", "forsta_authorities", 'io.forsta.librelay.provider'
            resValue "string", "forsta_account_type", 'io.forsta.librelay'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude 'asm-license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
    signingConfigs {
        release {
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            jniDebuggable true
            renderscriptDebuggable true
            debuggable true
            renderscriptOptimLevel 3
            zipAlignEnabled true
            buildConfigField "boolean", "DEV_BUILD", "true"
        }
        release {
            buildConfigField "boolean", "DEV_BUILD", "false"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-firebase-messaging.pro',
                    'proguard-google-play-services.pro',
                    'proguard-dagger.pro',
                    'proguard-jackson.pro',
                    'proguard-sqlite.pro',
                    'proguard-appcompat-v7.pro',
                    'proguard-square-okhttp.pro',
                    'proguard-square-okio.pro',
                    'proguard-spongycastle.pro',
                    'proguard-rounded-image-view.pro',
                    'proguard-glide.pro',
                    'proguard-shortcutbadger.pro',
                    'proguard-retrofit.pro',
                    'proguard-retrolambda.pro',
                    'proguard-webrtc.pro',
                    'proguard-workmanager.pro',
                    'proguard.cfg'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            renderscriptOptimLevel 3
            zipAlignEnabled true
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        dev {
            manifest.srcFile 'dev/AndroidManifest.xml'
        }
        prod {
            manifest.srcFile 'prod/AndroidManifest.xml'
        }
        androidTest {
            java.srcDirs = ['test/androidTest/java']
        }
        test {
            java.srcDirs = ['test/unitTest/java']
        }
    }
    lintOptions {
        disable 'MissingTranslation'
        disable 'ResourceType'
        abortOnError false
    }

}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

def getLastCommitTimestamp() {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['log', '-1', '--pretty=format:%ct']
            standardOutput = os
        }

        return os.toString() + "000"
    }
}

def timestamp() {
    return new Date().format('yyyyMMddHHmmss');
}

def Properties props = new Properties()
def propFile = new File('signing.properties')

if (System.getenv('STORE_FILE') && System.getenv('STORE_PASSWORD') && System.getenv('KEY_ALIAS') && System.getenv('KEY_PASSWORD')) {
    println 'Environment variables found for signature'
    android.signingConfigs.release.storeFile = file(System.getenv('STORE_FILE'))
    android.signingConfigs.release.storePassword = System.getenv('STORE_PASSWORD')
    android.signingConfigs.release.keyAlias = System.getenv('KEY_ALIAS')
    android.signingConfigs.release.keyPassword = System.getenv('KEY_PASSWORD')
} else if (propFile.canRead()) {
    println 'Props file found for signature'
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
    }
} else {
    println 'signing.properties not found'
}